service: fusionsolar

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: ${opt:region, 'eu-central-1'}
  memorySize: 512
  environment:
    # Environment variables for both functions
    FUSIONSOLAR_USERNAME: ${env:FUSIONSOLAR_USERNAME, ''}
    FUSIONSOLAR_PASSWORD: ${env:FUSIONSOLAR_PASSWORD, ''}
    PRICE_THRESHOLD: ${env:PRICE_THRESHOLD, '15.04'}
    LOW_POWER_SETTING: ${env:LOW_POWER_SETTING, '5.000'}
    HIGH_POWER_SETTING: ${env:HIGH_POWER_SETTING, 'no limit'}
    TELEGRAM_BOT_TOKEN: ${env:TELEGRAM_BOT_TOKEN, ''}
    TELEGRAM_CHAT_ID: ${env:TELEGRAM_CHAT_ID, ''}
    FUSIONSOLAR_STORAGE_TYPE: ${env:FUSIONSOLAR_STORAGE_TYPE, 's3'}
    FUSIONSOLAR_S3_BUCKET_NAME: ${env:FUSIONSOLAR_S3_BUCKET_NAME, 'fusionsolar-management'}
    FUSIONSOLAR_S3_REGION: ${env:FUSIONSOLAR_S3_REGION, 'eu-central-1'}
    FUSIONSOLAR_S3_ACCESS_KEY_ID: ${env:FUSIONSOLAR_S3_ACCESS_KEY_ID, ''}
    FUSIONSOLAR_S3_SECRET_ACCESS_KEY: ${env:FUSIONSOLAR_S3_SECRET_ACCESS_KEY, ''}
    USE_SECRETS_MANAGER: ${env:USE_SECRETS_MANAGER, 'true'}
    SECRETS_MANAGER_SECRET_NAME: ${env:SECRETS_MANAGER_SECRET_NAME, 'FusionSolarSecrets'}

  # Define IAM permissions
  iam:
    role:
      statements:
        # CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: 'arn:aws:logs:*:*:*'
        
        # S3 permissions (if using S3 storage)
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:provider.environment.FUSIONSOLAR_S3_BUCKET_NAME}"
            - "arn:aws:s3:::${self:provider.environment.FUSIONSOLAR_S3_BUCKET_NAME}/*"
        
        # Secrets Manager permissions (if using Secrets Manager)
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: '*'

package:
  patterns:
    - './**'
    - '!venv/**'
    - '!.idea/**'
    - '!.git/**'
    - '!tests/**'
    - '!build/**'
    - '!**/__pycache__/**'
    - '!**/*.pyc'
    - '!node_modules/**'

functions:
  priceFetcher:
    handler: price_fetcher_lambda.lambda_handler
    name: fusionsolar-price-fetcher
    description: Fetches electricity prices for the next day
    events:
      - schedule:
          rate: cron(30 * * * ? *)  # Run every hour at 30 minutes past
          enabled: true

  priceAnalyzer:
    handler: price_analyzer_lambda.lambda_handler
    name: fusionsolar-price-analyzer
    description: Analyzes electricity prices and adjusts power settings
    events:
      - schedule:
          rate: cron(0 * * * ? *)  # Run every hour on the hour
          enabled: true

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true  # Changed from false to true - this ensures dependencies are compiled for Lambda's environment when running on macos
    pythonBin: python3
    slim: true
    fileName: requirements.txt   # Use the requirements.txt in the lambda folder
